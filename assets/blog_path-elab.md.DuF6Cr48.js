import{_ as a,c as t,o as n,a2 as s}from"./chunks/framework.BV7BAn2o.js";const u=JSON.parse('{"title":"Elaboration of the \\"extension\\" type","description":"","frontmatter":{},"headers":[],"relativePath":"blog/path-elab.md","filePath":"blog/path-elab.md","lastUpdated":1679673438000}'),i={name:"blog/path-elab.md"};function o(p,e,l,r,c,h){return n(),t("div",null,e[0]||(e[0]=[s(`<h1 id="elaboration-of-the-extension-type" tabindex="-1">Elaboration of the &quot;extension&quot; type <a class="header-anchor" href="#elaboration-of-the-extension-type" aria-label="Permalink to &quot;Elaboration of the &quot;extension&quot; type&quot;">​</a></h1><p>Aya uses the so-called &quot;extension&quot; type (probably first-appeared <a href="https://arxiv.org/abs/1705.07442" target="_blank" rel="noreferrer">here</a>) as a generalized version of path type.</p><p>Instead of using the conventional path type, as in Cubical Agda:</p><ul><li><code>PathP (λ i → A i) a b</code> for <code>a : A 0</code> and <code>b : A 1</code></li><li><code>λ i → a : PathP (λ i → A i) (a 0) (a 1)</code> for <code>a : A i</code></li><li><code>p i : A i</code> for <code>p : PathP (λ i → A i) a b</code><ul><li><code>p 0 = a</code> and <code>p 1 = b</code></li></ul></li></ul><p>This type looks good, but it does not scale to higher dimensions. Consider, for example, the type of a square with four faces specified (from Agda&#39;s cubical library):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Square :</span></span>
<span class="line"><span>  {a₀₀ a₀₁ : A} (a₀₋ : a₀₀ ≡ a₀₁)</span></span>
<span class="line"><span>  {a₁₀ a₁₁ : A} (a₁₋ : a₁₀ ≡ a₁₁)</span></span>
<span class="line"><span>  (a₋₀ : a₀₀ ≡ a₁₀) (a₋₁ : a₀₁ ≡ a₁₁)</span></span>
<span class="line"><span>  → Type _</span></span>
<span class="line"><span>Square a₀₋ a₁₋ a₋₀ a₋₁ = PathP (λ i → a₋₀ i ≡ a₋₁ i) a₀₋ a₁₋</span></span></code></pre></div><p>It gets even worse when the type is heterogeneous:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SquareP :</span></span>
<span class="line"><span>  (A : I → I → Type ℓ)</span></span>
<span class="line"><span>  {a₀₀ : A i0 i0} {a₀₁ : A i0 i1} (a₀₋ : PathP (λ j → A i0 j) a₀₀ a₀₁)</span></span>
<span class="line"><span>  {a₁₀ : A i1 i0} {a₁₁ : A i1 i1} (a₁₋ : PathP (λ j → A i1 j) a₁₀ a₁₁)</span></span>
<span class="line"><span>  (a₋₀ : PathP (λ i → A i i0) a₀₀ a₁₀) (a₋₁ : PathP (λ i → A i i1) a₀₁ a₁₁)</span></span>
<span class="line"><span>  → Type ℓ</span></span>
<span class="line"><span>SquareP A a₀₋ a₁₋ a₋₀ a₋₁ = PathP (λ i → PathP (λ j → A i j) (a₋₀ i) (a₋₁ i)) a₀₋ a₁₋</span></span></code></pre></div><p>We have decided to use a partial element to represent these faces, and so we can freely add or delete these a face, without having to explicitly write down all faces for generality. This leads to the following syntax:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>--------  ↓ type           ↓ the &quot;i = 0&quot; end is b</span></span>
<span class="line"><span>[| i |] (A i) {| i := a | ~ i := b |}</span></span>
<span class="line"><span>-- ^ interval         ^ the &quot;i = 1&quot; end is a</span></span></code></pre></div><p>The above type is equivalent to <code>PathP (λ i → A i) a b</code>. We may use this to simplify the type signature of path concatenation:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>def concat {A : Type}</span></span>
<span class="line"><span>  (p : [| i |] A {| |})</span></span>
<span class="line"><span>  (q : [| i |] A {| ~ i := p 1 |})</span></span>
<span class="line"><span>  : [| i |] A {| ~ i := p 0 | i := q 1 |}</span></span></code></pre></div><p>It has fewer parameters than the conventional version:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>def concat {A : Type}</span></span>
<span class="line"><span>  {a b c : A}</span></span>
<span class="line"><span>  (p : Path A a b)</span></span>
<span class="line"><span>  (q : Path A b c)</span></span>
<span class="line"><span>  : Path A a c</span></span></code></pre></div><p>Now, how to implement this type? We have decided to overload lambdas and expressions as Cubical Agda did, but we have encountered several problems. Here&#39;s the story, in chronological order.</p><p>Below, we use &quot;type checking&quot; and we actually mean &quot;elaboration&quot;.</p><h2 id="first-attempt" tabindex="-1">First attempt <a class="header-anchor" href="#first-attempt" aria-label="Permalink to &quot;First attempt&quot;">​</a></h2><p><strong>Principle</strong>: do not annotate the terms (including variable references) with types, because this is going to harm efficiency and the code that tries to generate terms (now they&#39;ll have to generate the types as well, pain!).</p><p><strong>Problem</strong>: reduction of path application is type-directed, like <code>p 1</code> will reduce according to the type of <code>p</code>.</p><p><strong>Solution</strong>: annotate the path applications instead. Every time we do type checking &amp; we get a term of path type, we &quot;η-expand&quot; it into a normal lambda expression with a path application inside. This secures the reduction of path applications.</p><p><strong>New Problem</strong>: we expand too much. In case we want to check the type of term against a path type, the term is actually η-expanded and has a <em>Π-type</em>. So, we have the manually write path lambdas everywhere, e.g. given <code>p : Path A a b</code>, and only <code>λ i → p i</code> is a valid term of type <code>Path A a b</code>, not <code>p</code> (which is internally a lambda).</p><p><strong>Lesson</strong>: we need to preserve the types <em>somehow</em>, generate path applications only when necessary.</p><h2 id="second-attempt" tabindex="-1">Second attempt <a class="header-anchor" href="#second-attempt" aria-label="Permalink to &quot;Second attempt&quot;">​</a></h2><p><strong>New Solution</strong>: when checking something against a path type, we directly apply the boundary checks, instead of trying to invoke synthesize and unify the types. This eliminates a lot of <code>λ i → p i</code> problems.</p><p><strong>New Problem</strong>: this is incompatible with implicit arguments. Consider the following problem:</p><ul><li>have: <code>idp : {a : A} -&gt; Path A a a</code></li><li>elaborated: <code>λ i → idp i : {a : A} -&gt; I -&gt; A</code></li><li>check: <code>idp : Path Nat zero zero</code></li></ul><p>The new solution will try to apply the boundary before inserting the implicit arguments, which leads to type-incorrect terms.</p><p><strong>Lesson</strong>: we probably should not change the bidirectional type checking algorithm too much.</p><h2 id="third-attempt" tabindex="-1">Third attempt <a class="header-anchor" href="#third-attempt" aria-label="Permalink to &quot;Third attempt&quot;">​</a></h2><p><strong>New Solution</strong>: the type information is known in the bidirectional type checking anyway, so we only generate path applications during the type checking of application terms.</p><p>This has worked so far, with some unsolved problems (yet to be discussed):</p><ul><li>Is <code>p : [| i |] A {| |}</code> an instance of type <code>[| i |] A {| i := a |}</code>? <ul><li>Currently, Aya do not think so.</li></ul></li><li>Can we automatically turn Agda-style squares to its preferred version in generalized path type? <ul><li>Related issue: <a href="https://github.com/aya-prover/aya-dev/issues/530" target="_blank" rel="noreferrer">530</a></li><li>A sort of &quot;flattening&quot;</li></ul></li></ul><p>If you have any thoughts, feel free to reach out :)</p><h2 id="update-2023-03-24" tabindex="-1">Update (2023-03-24) <a class="header-anchor" href="#update-2023-03-24" aria-label="Permalink to &quot;Update (2023-03-24)&quot;">​</a></h2><p>The implementation has been updated to solve some the above problems partially. Essentially, we need to do one thing: coercive subtyping. Since the type checking already respects the type (say, does not change the type), it remains to insert an η-expansion when the subtyping is invoked. We also need to store the boundary information in the path application term to have simple normalization algorithm.</p><p>Carlo Angiuli told me that in cooltt, the path type is <em>decoded</em> (in the sense of the universe à la Tarski <code>el</code> operator) into a Π-type that returns a cubical subtype, and since <code>el</code> is not required to be injective, this should be fine. At first, I was worried about the fibrancy of the path type, because a Π-type into a subtype is not fibrant, but it turns out that this is unrelated. We don&#39;t talk about the fibrancy of the types, but only the fibrancy of the type <em>codes</em>.</p>`,36)]))}const b=a(i,[["render",o]]);export{u as __pageData,b as default};
