import{_ as T,c as I,o as g,j as a,a2 as v,a as s}from"./chunks/framework.BV7BAn2o.js";const w={mounted(){const y=new Map;function p(c){const e=c.querySelectorAll("a[href]");for(const r of e){const n=r.href,i=y.get(n)??new Set;i.add(r),y.set(n,i)}for(const r of e)r.onmouseover=function(){for(const n of y.get(this.href))n.classList.add("hover-highlight")},r.onmouseout=function(){for(const n of y.get(this.href))n.classList.remove("hover-highlight")}}function d(c){return decodeURIComponent(atob(c).split("").map(function(e){return"%"+("00"+e.charCodeAt(0).toString(16)).slice(-2)}).join(""))}const x=(c=>{const e={};return(...r)=>{const n=JSON.stringify(r);return e[n]=e[n]||c(...r)}})(d);class u{constructor(){this.list=[]}dismiss(e){e&&(e.remove(),this.list=this.list.filter(r=>r!==e))}dismissIfNotUsed(e){e&&(e.markedForDismissal=!0,setTimeout(()=>{!e.userIsThinking&&this.allowAutoDismissal(e)&&this.dismiss(e)},1e3))}allowAutoDismissal(e){return e.markedForDismissal&&!e.userClicked}fireAutoDismissalFor(e){let r=this.list.find(n=>n.userCreatedFrom===e);this.dismissIfNotUsed(r)}createHoverFor(e,r,n){let i=this.list.find(t=>t.userCreatedFrom===e);if(i&&i.userClicked)return i;let A=[];const M=this.list.filter(t=>{if(this.allowAutoDismissal(t))return A.push(t),!1;const l=t.userCreatedFrom,f=e;let h=f;for(;h;){if(h===l)return!0;h=h.parentElement}for(h=l;h;){if(h===f)return!0;h=h.parentElement}return!1});A.forEach(t=>this.dismiss(t));let o=document.createElement("div");o.userCreatedFrom=e,o.innerHTML="<span id='AyaTooltipPopupClose'>&times;</span>"+x(r),o.classList.add("AyaTooltipPopup"),p(o);let L=this;if(o.handleEvent=function(t){if(t.type==="click"){this.userClicked=!0,this.markedForDismissal=!1;let l=this.children[0];if(!l)return;let f=this;l.style.visibility="visible",l.addEventListener("click",h=>L.dismiss(f))}t.type==="mouseover"&&(this.userIsThinking=!0),t.type==="mouseout"&&(this.userIsThinking=!1,L.dismissIfNotUsed(this))},o.addEventListener("click",o),o.addEventListener("mouseover",o),o.addEventListener("mouseout",o),n.appendChild(o),o.style.left=`${e.offsetLeft}px`,M.length===0){const t=e.getBoundingClientRect(),l=o.getBoundingClientRect();t.bottom+l.height+30>window.innerHeight?o.style.top=`calc(${e.offsetTop-l.height+8}px - 3em)`:o.style.top=`${e.offsetTop+e.offsetHeight+8}px`}else{const t=Math.max(...M.map(l=>l.offsetTop+l.offsetHeight));o.style.top=`${t+8}px`}return this.list.push(o),o}}let m=new u;function V(c){return function(){let e=this;const r=e.getAttribute("data-tooltip-text");r&&(c?m.createHoverFor(e,r,document.body):m.fireAutoDismissalFor(e))}}p(document);{let c=document.getElementsByClassName("aya-tooltip");for(let e=0;e<c.length;e++){let r=c[e];r.hasAttribute("data-tooltip-text")&&(r.onmouseover=V(!0),r.onmouseout=V(!1))}}}},C=JSON.parse(`{"title":"Proof assistants' user tutorial","description":"","frontmatter":{"lastUpdated":"2024-12-15T22:37:34.000Z"},"headers":[],"relativePath":"guide/prover-tutorial.md","filePath":"guide/prover-tutorial.md","lastUpdated":1734302254000}`);function N(y,p,d,b,x,u){return g(),I("div",null,p[0]||(p[0]=[a("h1",{id:"proof-assistants-user-tutorial",tabindex:"-1"},[s("Proof assistants' user tutorial "),a("a",{class:"header-anchor",href:"#proof-assistants-user-tutorial","aria-label":`Permalink to "Proof assistants' user tutorial"`},"​")],-1),a("p",null,"Great. I expect you to have basic experience with interactive theorem proving. This is another Aya tutorial for interactive theorem prover users. If you find a bug, open an issue on GitHub!",-1),a("p",null,[s("This tutorial will use some basic Aya syntax. I hope those are sufficiently intuitive, or you can look up "),a("a",{href:"./haskeller-tutorial.html"},"this tutorial"),s(".")],-1),a("p",null,"Here's a little prelude, which you do not need to understand now.",-1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"prim"),s(),a("a",{id:"Mian-I",class:"aya-hover","aya-hover-text":"ISet",href:"#Mian-I"},[a("span",{class:"Primitive"},"I")]),s(`
`),a("span",{class:"Keyword"},"prim"),s(),a("a",{id:"Mian-coe",class:"aya-hover","aya-hover-text":"A r → A s",href:"#Mian-coe"},[a("span",{class:"Primitive"},"coe")]),s(" ("),a("a",{id:"v635371680",class:"aya-hover","aya-hover-text":"I",href:"#v635371680"},[a("span",{class:"LocalVar"},"r")]),s(),a("a",{id:"v1293226111",class:"aya-hover","aya-hover-text":"I",href:"#v1293226111"},[a("span",{class:"LocalVar"},"s")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"ISet",href:"#Mian-I"},[a("span",{class:"Primitive"},"I")]),s(") ("),a("a",{id:"v441001942",class:"aya-hover","aya-hover-text":"I → Type 0",href:"#v441001942"},[a("span",{class:"LocalVar"},"A")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"ISet",href:"#Mian-I"},[a("span",{class:"Primitive"},"I")]),s(" → "),a("span",{class:"Keyword"},"Type"),s(") : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v441001942"},[a("span",{class:"LocalVar"},"A")]),s(),a("a",{class:"aya-hover","aya-hover-text":"I",href:"#v635371680"},[a("span",{class:"LocalVar"},"r")]),s(" → "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v441001942"},[a("span",{class:"LocalVar"},"A")]),s(),a("a",{class:"aya-hover","aya-hover-text":"I",href:"#v1293226111"},[a("span",{class:"LocalVar"},"s")]),s(`
`),a("span",{class:"Keyword"},"prim"),s(),a("a",{id:"Mian-Path",class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Path"},[a("span",{class:"Primitive"},"Path")]),s(`
`),a("span",{class:"Keyword"},"variable"),s(),a("a",{id:"v445918232",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(),a("a",{id:"v1776374725",href:"#v1776374725"},[a("span",{class:"Generalized"},"B")]),s(" : "),a("span",{class:"Keyword"},"Type"),s(`
`),a("span",{class:"Keyword"},"def"),s(),a("span",{class:"Keyword"},"infix"),s(),a("a",{id:"Mian-3d",class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(" ("),a("a",{id:"v479920916",class:"aya-hover","aya-hover-text":"A",href:"#v479920916"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{id:"v1161322357",class:"aya-hover","aya-hover-text":"A",href:"#v1161322357"},[a("span",{class:"LocalVar"},"b")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(") ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Path"},[a("span",{class:"Primitive"},"Path")]),s(" ("),a("span",{class:"Keyword"},"\\"),a("a",{id:"v159475521",href:"#v159475521"},[a("span",{class:"LocalVar"},"i")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(") "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v479920916"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1161322357"},[a("span",{class:"LocalVar"},"b")]),s(`

`),a("span",{class:"Keyword"},"open"),s(),a("span",{class:"Keyword"},"inductive"),s(),a("a",{id:"Mian-Nat",class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")]),s(`
| `),a("a",{id:"Mian-Nat-zero",class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-Nat-zero"},[a("span",{class:"Constructor"},"zero")]),s(`
| `),a("a",{id:"Mian-Nat-suc",class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-Nat-suc"},[a("span",{class:"Constructor"},"suc")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")])]),s(`
`)],-1),a("h2",{id:"function-extensionality",tabindex:"-1"},[s("Function extensionality "),a("a",{class:"header-anchor",href:"#function-extensionality","aria-label":'Permalink to "Function extensionality"'},"​")],-1),a("p",null,"Consider the following code:",-1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"open"),s(),a("span",{class:"Keyword"},"inductive"),s(),a("a",{id:"Mian-Bool",class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Bool"},[a("span",{class:"Data"},"Bool")]),s(" | "),a("a",{id:"Mian-Bool-true",class:"aya-hover","aya-hover-text":"Bool",href:"#Mian-Bool-true"},[a("span",{class:"Constructor"},"true")]),s(" | "),a("a",{id:"Mian-Bool-false",class:"aya-hover","aya-hover-text":"Bool",href:"#Mian-Bool-false"},[a("span",{class:"Constructor"},"false")]),s(`
`),a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-not",class:"aya-hover","aya-hover-text":"Bool",href:"#Mian-not"},[a("span",{class:"Fn"},"not")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Bool"},[a("span",{class:"Data"},"Bool")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Bool"},[a("span",{class:"Data"},"Bool")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Bool",href:"#Mian-Bool-true"},[a("span",{class:"Constructor"},"true")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Bool",href:"#Mian-Bool-false"},[a("span",{class:"Constructor"},"false")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Bool",href:"#Mian-Bool-false"},[a("span",{class:"Constructor"},"false")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Bool",href:"#Mian-Bool-true"},[a("span",{class:"Constructor"},"true")]),s(`

`),a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-id",class:"aya-hover","aya-hover-text":"Bool",href:"#Mian-id"},[a("span",{class:"Fn"},"id")]),s(" ("),a("a",{id:"v800735172",class:"aya-hover","aya-hover-text":"Bool",href:"#v800735172"},[a("span",{class:"LocalVar"},"x")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Bool"},[a("span",{class:"Data"},"Bool")]),s(") ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Bool",href:"#v800735172"},[a("span",{class:"LocalVar"},"x")]),s(`

`),a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-Goal",class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Goal"},[a("span",{class:"Fn"},"Goal")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Bool → Bool",href:"#Mian-id"},[a("span",{class:"Fn"},"id")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(" ("),a("span",{class:"Keyword"},"fn"),s(),a("a",{id:"v176342513",href:"#v176342513"},[a("span",{class:"LocalVar"},"x")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Bool",href:"#Mian-not"},[a("span",{class:"Fn"},"not")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Bool",href:"#Mian-not"},[a("span",{class:"Fn"},"not")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Bool",href:"#v176342513"},[a("span",{class:"LocalVar"},"x")]),s(`))

`),a("span",{class:"Comment"},"// {??} is the syntax for typed holes in Aya:"),s(`
`),a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-question",class:"aya-hover","aya-hover-text":"Goal",href:"#Mian-question"},[a("span",{class:"Fn"},"question")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Goal"},[a("span",{class:"Fn"},"Goal")]),s(" ⇒ "),a("span",{class:"aya-tooltip","data-tooltip-text":"PHByZSBjbGFzcz0iQXlhIj4KPGNvZGU+R29hbDogR29hbCBvZiB0eXBlCiAgICAgICAgPGEgaHJlZj0iI01pYW4tR29hbCI+PHNwYW4gY2xhc3M9IkZuIj5Hb2FsPC9zcGFuPjwvYT4KICAgICAgICAoTm9ybWFsaXplZDogKDxzcGFuIGNsYXNzPSJLZXl3b3JkIj5mbjwvc3Bhbj4gPGEgaWQ9InYxMDg4NDE3OTc1IiBocmVmPSIjdjEwODg0MTc5NzUiPnAwPC9hPiDih5IgPGEgaHJlZj0iI3YxMDg4NDE3OTc1Ij48c3BhbiBjbGFzcz0iTG9jYWxWYXIiPnAwPC9zcGFuPjwvYT4pID0gKDxzcGFuIGNsYXNzPSJLZXl3b3JkIj5mbjwvc3Bhbj4gPGEgaWQ9InYyMDM2Nzc1NTkxIiBocmVmPSIjdjIwMzY3NzU1OTEiPnAwPC9hPiDih5IgPHNwYW4gY2xhc3M9IkNhbGwiPjxhIGhyZWY9IiNNaWFuLW5vdCI+PHNwYW4gY2xhc3M9IkZuIj5ub3Q8L3NwYW4+PC9hPiA8c3BhbiBjbGFzcz0iQ2FsbCI+KDxhIGhyZWY9IiNNaWFuLW5vdCI+PHNwYW4gY2xhc3M9IkZuIj5ub3Q8L3NwYW4+PC9hPiA8YSBocmVmPSIjdjIwMzY3NzU1OTEiPjxzcGFuIGNsYXNzPSJMb2NhbFZhciI+cDA8L3NwYW4+PC9hPik8L3NwYW4+PC9zcGFuPikpCiAgICAgIENvbnRleHQ6PC9jb2RlPgo8L3ByZT4K"},[a("span",{class:"Goal"},[a("span",{class:"aya-tooltip","data-tooltip-text":"PHByZSBjbGFzcz0iQXlhIj4KPGNvZGU+PzxhIGhyZWY9IiN2MTMwOTEyOTA1NSI+XzI8L2E+PC9jb2RlPgo8L3ByZT4K"},"{??}")])])]),s(`
`)],-1),a("p",null,[s("There is no way to prove it in Martin-Löf type theory or Calculus of Constructions, because by canonicity of these type theories, the normal form of "),a("code",{class:"Aya"},[a("a",{href:"#Mian-question"},[a("span",{class:"Fn"},"question")])]),s(" must be the constructor of its type, which is reflexivity, but the goal is not reflexive. However, you are very smart and realized you can instead show the following:")],-1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-Goal27",class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Goal27"},[a("span",{class:"Fn"},"Goal'")]),s(" ("),a("a",{id:"v1129944640",class:"aya-hover","aya-hover-text":"Bool",href:"#v1129944640"},[a("span",{class:"LocalVar"},"x")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Bool"},[a("span",{class:"Data"},"Bool")]),s(") ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Bool",href:"#Mian-id"},[a("span",{class:"Fn"},"id")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Bool",href:"#v1129944640"},[a("span",{class:"LocalVar"},"x")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Bool",href:"#Mian-not"},[a("span",{class:"Fn"},"not")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Bool",href:"#Mian-not"},[a("span",{class:"Fn"},"not")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Bool",href:"#v1129944640"},[a("span",{class:"LocalVar"},"x")]),s(")")]),s(`
`)],-1),v('<p>This is pretty much the same theorem, and can be proved by case analysis on <code>x</code>!</p><p>Now, suppose we need to show a propositional equality between two records. This means we have to show they&#39;re memberwise equal. One record has a member <code class="Aya"><span class="Keyword">fn</span> <a id="v790094605" href="#v790094605">p0</a> ⇒ <span class="Call"><a href="#Mian-not"><span class="Fn">not</span></a> <span class="Call">(<a href="#Mian-not"><span class="Fn">not</span></a> <a href="#v790094605"><span class="LocalVar">p0</span></a>)</span></span></code>, and the other has <code class="Aya"><a href="#Mian-id"><span class="Fn">id</span></a></code>. This time, you cannot cheat by changing the goal type. You post the question on some mailing list and people are telling you that the alternative version of the theorem you have shown does not imply the original, unless &quot;function extensionality&quot; is a theorem in your type theory.</p><p>To have function extensionality as a theorem, you came across two distinct type theories: observational type theory and cubical type theory. Aya chose the latter.</p><h2 id="cubical" tabindex="-1">Cubical <a class="header-anchor" href="#cubical" aria-label="Permalink to &quot;Cubical&quot;">​</a></h2><p>Here&#39;s the proof of function extensionality in Aya:</p>',5),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-funExt",class:"aya-hover","aya-hover-text":"f = g",href:"#Mian-funExt"},[a("span",{class:"Fn"},"funExt")]),s(" ("),a("a",{id:"v1438988851",class:"aya-hover","aya-hover-text":"A → B",href:"#v1438988851"},[a("span",{class:"LocalVar"},"f")]),s(),a("a",{id:"v1404565079",class:"aya-hover","aya-hover-text":"A → B",href:"#v1404565079"},[a("span",{class:"LocalVar"},"g")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(" → "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v1776374725"},[a("span",{class:"Generalized"},"B")]),s(") ("),a("a",{id:"v1800976873",class:"aya-hover","aya-hover-text":"Fn (B : A) → f B = g B",href:"#v1800976873"},[a("span",{class:"LocalVar"},"p")]),s(" : "),a("span",{class:"Keyword"},"∀"),s(),a("a",{id:"v1245065720",class:"aya-hover","aya-hover-text":"A",href:"#v1245065720"},[a("span",{class:"LocalVar"},"a")]),s(" → "),a("a",{class:"aya-hover","aya-hover-text":"B",href:"#v1438988851"},[a("span",{class:"LocalVar"},"f")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1245065720"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"B",href:"#v1404565079"},[a("span",{class:"LocalVar"},"g")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1245065720"},[a("span",{class:"LocalVar"},"a")]),s(") : "),a("a",{class:"aya-hover","aya-hover-text":"A → B",href:"#v1438988851"},[a("span",{class:"LocalVar"},"f")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A → B",href:"#v1404565079"},[a("span",{class:"LocalVar"},"g")]),s(`
   ⇒ `),a("span",{class:"Keyword"},"fn"),s(),a("a",{id:"v659590237",href:"#v659590237"},[a("span",{class:"LocalVar"},"i")]),s(),a("a",{id:"v1869039062",href:"#v1869039062"},[a("span",{class:"LocalVar"},"a")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"B",href:"#v1800976873"},[a("span",{class:"LocalVar"},"p")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1869039062"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"I",href:"#v659590237"},[a("span",{class:"LocalVar"},"i")])]),s(`
`)],-1),v('<p>Aya has a &quot;cubical&quot; equality type that is not inductively defined. An equality <code>a = b</code> for <code>a, b : A</code> is really just a function <code class="Aya"><span class="Primitive">I</span> → <a href="#v18179709"><span class="LocalVar">A</span></a></code> (as we can see from the proof construction, for <code>f = g</code> we prove it by a lambda abstraction) where:</p><ul><li><p><code class="Aya"><a href="#Mian-I"><span class="Primitive">I</span></a></code> is a special type that has two closed instances <code>0</code> and <code>1</code>, and we think of there being a propositional equality between <code>0</code> and <code>1</code>, and there is no pattern matching operation that distinguishes them. So, every function that maps out of <code class="Aya"><a href="#Mian-I"><span class="Primitive">I</span></a></code> must <i>preserve</i> this judgmental equality.</p></li><li><p>For <code>f : I -&gt; A</code>, the corresponding equality type is <code>f 0 = f 1</code>. Hypothetically, let <code>f</code> be the identity function, and we get a propositional equality between <code>0</code> and <code>1</code>, but for technical reasons we don&#39;t talk about equality between <code>0</code> and <code>1</code> directly.</p></li></ul><p>By this definition, we can &quot;prove&quot; reflexivity by creating a constant function:</p>',3),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-refl",class:"aya-hover","aya-hover-text":"a = a",href:"#Mian-refl"},[a("span",{class:"Fn"},"refl")]),s(" {"),a("a",{id:"v511832416",class:"aya-hover","aya-hover-text":"A",href:"#v511832416"},[a("span",{class:"LocalVar"},"a")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s("} : "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v511832416"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v511832416"},[a("span",{class:"LocalVar"},"a")]),s(" ⇒ "),a("span",{class:"Keyword"},"fn"),s(),a("a",{id:"v110651474",href:"#v110651474"},[a("span",{class:"LocalVar"},"i")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v511832416"},[a("span",{class:"LocalVar"},"a")])]),s(`
`)],-1),v(`<p>For <code>f = fn i =&gt; a</code>, we need to verify if <code>f 0</code> equals the left-hand side of the equality and <code>f 1</code> equals the right-hand side, which are both true.</p><p>And to show that <code>f = g</code>, it suffices to construct a function <code>q : I -&gt; (A -&gt; B)</code> such that <code>q 0 = f</code> and <code>q 1 = g</code>. This is true for the proof above:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  (fn i a =&gt; p a i) 0    β-reduce</span></span>
<span class="line"><span>= fn a =&gt; p a 0          p a : f a = g a</span></span>
<span class="line"><span>= fn a =&gt; f a            η-reduce</span></span>
<span class="line"><span>= f</span></span></code></pre></div><p>We may also prove the action-on-path theorem, commonly known as <code>cong</code>, but renamed to <code class="Aya"><a href="#Mian-pmap"><span class="Fn">pmap</span></a></code> to avoid a potential future naming clash:</p>`,4),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-pmap",class:"aya-hover","aya-hover-text":"f a = f b",href:"#Mian-pmap"},[a("span",{class:"Fn"},"pmap")]),s(" ("),a("a",{id:"v731829978",class:"aya-hover","aya-hover-text":"A → B",href:"#v731829978"},[a("span",{class:"LocalVar"},"f")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(" → "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v1776374725"},[a("span",{class:"Generalized"},"B")]),s(") {"),a("a",{id:"v1818339587",class:"aya-hover","aya-hover-text":"A",href:"#v1818339587"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{id:"v1703696921",class:"aya-hover","aya-hover-text":"A",href:"#v1703696921"},[a("span",{class:"LocalVar"},"b")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s("} ("),a("a",{id:"v1507118393",class:"aya-hover","aya-hover-text":"a = b",href:"#v1507118393"},[a("span",{class:"LocalVar"},"p")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1818339587"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1703696921"},[a("span",{class:"LocalVar"},"b")]),s(") : "),a("a",{class:"aya-hover","aya-hover-text":"B",href:"#v731829978"},[a("span",{class:"LocalVar"},"f")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1818339587"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"B",href:"#v731829978"},[a("span",{class:"LocalVar"},"f")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1703696921"},[a("span",{class:"LocalVar"},"b")]),s(`
   ⇒ `),a("span",{class:"Keyword"},"fn"),s(),a("a",{id:"v1070044969",href:"#v1070044969"},[a("span",{class:"LocalVar"},"i")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"B",href:"#v731829978"},[a("span",{class:"LocalVar"},"f")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1507118393"},[a("span",{class:"LocalVar"},"p")]),s(),a("a",{class:"aya-hover","aya-hover-text":"I",href:"#v1070044969"},[a("span",{class:"LocalVar"},"i")]),s(")")]),s(`
`)],-1),a("p",null,"Checking the above definition is left as an exercise.",-1),a("p",null,[s("However, we cannot yet define transitivity/symmetry of equality because we do not have the traditional elimination rule of the equality type -- the "),a("code",null,"J"),s(" rule. This will need some advanced proving techniques that are beyond the scope of this simple tutorial, so I'll skim them.")],-1),a("p",null,"We may define the type-safe coercion using it, and this will help us prove the two lemmas about equality:",-1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-cast",class:"aya-hover","aya-hover-text":"A → B",href:"#Mian-cast"},[a("span",{class:"Fn"},"cast")]),s(" ("),a("a",{id:"v2024240125",class:"aya-hover","aya-hover-text":"A = B",href:"#v2024240125"},[a("span",{class:"LocalVar"},"p")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(),a("span",{class:"Keyword"},"↑"),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 1",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v1776374725"},[a("span",{class:"Generalized"},"B")]),s(") : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(" → "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v1776374725"},[a("span",{class:"Generalized"},"B")]),s(" ⇒ "),a("span",{class:"Keyword"},"↑"),s(),a("a",{class:"aya-hover","aya-hover-text":"A → B",href:"#Mian-coe"},[a("span",{class:"Primitive"},"coe")]),s(" 0 1 ("),a("span",{class:"Keyword"},"fn"),s(),a("a",{id:"v380274260",href:"#v380274260"},[a("span",{class:"LocalVar"},"i")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v2024240125"},[a("span",{class:"LocalVar"},"p")]),s(),a("a",{class:"aya-hover","aya-hover-text":"I",href:"#v380274260"},[a("span",{class:"LocalVar"},"i")]),s(")")]),s(`
`)],-1),a("p",null,[s("Then, from "),a("code",null,"p : a = b"),s(" we construct the equivalence "),a("code",null,"(a = a) = (b = a)"),s(" and coerce along this equivalence:")],-1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-pinv",class:"aya-hover","aya-hover-text":"b = a",href:"#Mian-pinv"},[a("span",{class:"Fn"},"pinv")]),s(" {"),a("a",{id:"v1745043985",class:"aya-hover","aya-hover-text":"A",href:"#v1745043985"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{id:"v1333041165",class:"aya-hover","aya-hover-text":"A",href:"#v1333041165"},[a("span",{class:"LocalVar"},"b")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s("} ("),a("a",{id:"v1482246673",class:"aya-hover","aya-hover-text":"a = b",href:"#v1482246673"},[a("span",{class:"LocalVar"},"p")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1745043985"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1333041165"},[a("span",{class:"LocalVar"},"b")]),s(") : "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1333041165"},[a("span",{class:"LocalVar"},"b")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1745043985"},[a("span",{class:"LocalVar"},"a")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"b = a",href:"#Mian-cast"},[a("span",{class:"Fn"},"cast")]),s(" ("),a("span",{class:"Keyword"},"\\"),a("a",{id:"v1760670079",href:"#v1760670079"},[a("span",{class:"LocalVar"},"i")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1482246673"},[a("span",{class:"LocalVar"},"p")]),s(),a("a",{class:"aya-hover","aya-hover-text":"I",href:"#v1760670079"},[a("span",{class:"LocalVar"},"i")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1745043985"},[a("span",{class:"LocalVar"},"a")]),s(") "),a("a",{class:"aya-hover","aya-hover-text":"a = a",href:"#Mian-refl"},[a("span",{class:"Fn"},"refl")])]),s(`
`)],-1),a("p",null,[s("From "),a("code",null,"q : b = c"),s(" we construct the equivalence "),a("code",null,"(a = b) = (a = c)"),s(" and coerce along this equivalence:")],-1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-concat",class:"aya-hover","aya-hover-text":"a = c",href:"#Mian-concat"},[a("span",{class:"Fn"},"concat")]),s(" {"),a("a",{id:"v130764844",class:"aya-hover","aya-hover-text":"A",href:"#v130764844"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{id:"v660339123",class:"aya-hover","aya-hover-text":"A",href:"#v660339123"},[a("span",{class:"LocalVar"},"b")]),s(),a("a",{id:"v462039519",class:"aya-hover","aya-hover-text":"A",href:"#v462039519"},[a("span",{class:"LocalVar"},"c")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s("} ("),a("a",{id:"v313082880",class:"aya-hover","aya-hover-text":"a = b",href:"#v313082880"},[a("span",{class:"LocalVar"},"p")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v130764844"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v660339123"},[a("span",{class:"LocalVar"},"b")]),s(") ("),a("a",{id:"v541698497",class:"aya-hover","aya-hover-text":"b = c",href:"#v541698497"},[a("span",{class:"LocalVar"},"q")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v660339123"},[a("span",{class:"LocalVar"},"b")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v462039519"},[a("span",{class:"LocalVar"},"c")]),s(") : "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v130764844"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v462039519"},[a("span",{class:"LocalVar"},"c")]),s(` ⇒
  `),a("a",{class:"aya-hover","aya-hover-text":"a = c",href:"#Mian-cast"},[a("span",{class:"Fn"},"cast")]),s(" ("),a("span",{class:"Keyword"},"\\"),a("a",{id:"v1419064126",href:"#v1419064126"},[a("span",{class:"LocalVar"},"i")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v130764844"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v541698497"},[a("span",{class:"LocalVar"},"q")]),s(),a("a",{class:"aya-hover","aya-hover-text":"I",href:"#v1419064126"},[a("span",{class:"LocalVar"},"i")]),s(") "),a("a",{class:"aya-hover","aya-hover-text":"a = b",href:"#v313082880"},[a("span",{class:"LocalVar"},"p")])]),s(`
`)],-1),a("p",null,"Note that at this point you can already do a bunch of familiar proofs about some simple types such as natural numbers or sized vectors. These are left as exercises, and you are encouraged to try yourself if you are not very sure about how it feels to prove things in Aya.",-1),a("h2",{id:"overlapping-and-order-independent-pattern-matching",tabindex:"-1"},[s("Overlapping and Order-independent Pattern Matching "),a("a",{class:"header-anchor",href:"#overlapping-and-order-independent-pattern-matching","aria-label":'Permalink to "Overlapping and Order-independent Pattern Matching"'},"​")],-1),a("p",null,[s("Remember the "),a("code",null,"+-comm"),s(" proof that you need two lemmas? It is standard to define "),a("code",null,"+"),s(" in the following way:")],-1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"example"),s(),a("span",{class:"Keyword"},"def"),s(),a("span",{class:"Keyword"},"infix"),s(),a("a",{id:"Mian-3aNoExport-2b",class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-3aNoExport-2b"},[a("span",{class:"Fn"},"+")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")]),s(`
| 0, `),a("a",{id:"v1225568095",class:"aya-hover","aya-hover-text":"Nat",href:"#v1225568095"},[a("span",{class:"LocalVar"},"n")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v1225568095"},[a("span",{class:"LocalVar"},"n")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-Nat-suc"},[a("span",{class:"Constructor"},"suc")]),s(),a("a",{id:"v1439632660",class:"aya-hover","aya-hover-text":"Nat",href:"#v1439632660"},[a("span",{class:"LocalVar"},"m")]),s(", "),a("a",{id:"v62343880",class:"aya-hover","aya-hover-text":"Nat",href:"#v62343880"},[a("span",{class:"LocalVar"},"n")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-Nat-suc"},[a("span",{class:"Constructor"},"suc")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v1439632660"},[a("span",{class:"LocalVar"},"m")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-3aNoExport-2b"},[a("span",{class:"Fn"},"+")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v62343880"},[a("span",{class:"LocalVar"},"n")]),s(")")]),s(`
`)],-1),a("p",null,[s("And then you prove that "),a("code",null,"a + 0 = a"),s(" and "),a("code",null,"a + suc b = suc (a + b)"),s(". It is tempting to have "),a("code",null,"| n, 0 => n"),s(" as a computation rule as well, but this is incompatible with the usual semantics of pattern matching, which is compiled to elimination principles during type checking. However, you "),a("em",null,"can"),s(" do that in Aya. You may also add the other lemma as well.")],-1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"overlap"),s(),a("span",{class:"Keyword"},"def"),s(),a("span",{class:"Keyword"},"infix"),s(),a("a",{id:"Mian-2b",class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-2b"},[a("span",{class:"Fn"},"+")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")]),s(`
| 0, `),a("a",{id:"v1719072416",class:"aya-hover","aya-hover-text":"Nat",href:"#v1719072416"},[a("span",{class:"LocalVar"},"n")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v1719072416"},[a("span",{class:"LocalVar"},"n")]),s(`
| `),a("a",{id:"v2092801316",class:"aya-hover","aya-hover-text":"Nat",href:"#v2092801316"},[a("span",{class:"LocalVar"},"n")]),s(", 0 ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v2092801316"},[a("span",{class:"LocalVar"},"n")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-Nat-suc"},[a("span",{class:"Constructor"},"suc")]),s(),a("a",{id:"v376635015",class:"aya-hover","aya-hover-text":"Nat",href:"#v376635015"},[a("span",{class:"LocalVar"},"m")]),s(", "),a("a",{id:"v1344697180",class:"aya-hover","aya-hover-text":"Nat",href:"#v1344697180"},[a("span",{class:"LocalVar"},"n")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-Nat-suc"},[a("span",{class:"Constructor"},"suc")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v376635015"},[a("span",{class:"LocalVar"},"m")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-2b"},[a("span",{class:"Fn"},"+")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v1344697180"},[a("span",{class:"LocalVar"},"n")]),s(`)
| `),a("a",{id:"v28597262",class:"aya-hover","aya-hover-text":"Nat",href:"#v28597262"},[a("span",{class:"LocalVar"},"m")]),s(", "),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-Nat-suc"},[a("span",{class:"Constructor"},"suc")]),s(),a("a",{id:"v300983713",class:"aya-hover","aya-hover-text":"Nat",href:"#v300983713"},[a("span",{class:"LocalVar"},"n")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-Nat-suc"},[a("span",{class:"Constructor"},"suc")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v28597262"},[a("span",{class:"LocalVar"},"m")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-2b"},[a("span",{class:"Fn"},"+")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v300983713"},[a("span",{class:"LocalVar"},"n")]),s(`)
`),a("span",{class:"Keyword"},"tighter"),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")])]),s(`
`)],-1),a("p",null,[s("This makes all of them definitional equality. So, "),a("code",{class:"Aya"},[a("a",{href:"#Mian-2b-comm"},[a("span",{class:"Fn"},"+-comm")])]),s(" can be simplified to just one pattern matching:")],-1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-2b-comm",class:"aya-hover","aya-hover-text":"(a + b) = (b + a)",href:"#Mian-2b-comm"},[a("span",{class:"Fn"},"+-comm")]),s(" ("),a("a",{id:"v541285440",class:"aya-hover","aya-hover-text":"Nat",href:"#v541285440"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{id:"v1463355115",class:"aya-hover","aya-hover-text":"Nat",href:"#v1463355115"},[a("span",{class:"LocalVar"},"b")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")]),s(") : "),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v541285440"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-2b"},[a("span",{class:"Fn"},"+")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v1463355115"},[a("span",{class:"LocalVar"},"b")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v1463355115"},[a("span",{class:"LocalVar"},"b")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-2b"},[a("span",{class:"Fn"},"+")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v541285440"},[a("span",{class:"LocalVar"},"a")]),s(),a("span",{class:"Keyword"},"elim"),s(),a("a",{href:"#v541285440"},[a("span",{class:"LocalVar"},"a")]),s(`
| 0 ⇒ `),a("a",{class:"aya-hover","aya-hover-text":"b = b",href:"#Mian-refl"},[a("span",{class:"Fn"},"refl")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-Nat-suc"},[a("span",{class:"Constructor"},"suc")]),s(" _ ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"suc (_ + b) = suc (b + _)",href:"#Mian-pmap"},[a("span",{class:"Fn"},"pmap")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat → Nat",href:"#Mian-Nat-suc"},[a("span",{class:"Constructor"},"suc")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"(_ + b) = (b + _)",href:"#Mian-2b-comm"},[a("span",{class:"Fn"},"+-comm")]),s(),a("span",{class:"aya-tooltip","data-tooltip-text":"PHByZSBjbGFzcz0iQXlhIj4KPGNvZGU+PGEgaHJlZj0iI3YxMDYzNzM3NjYyIj48c3BhbiBjbGFzcz0iTG9jYWxWYXIiPl88L3NwYW4+PC9hPjwvY29kZT4KPC9wcmU+Cg=="},"_"),s(),a("span",{class:"aya-tooltip","data-tooltip-text":"PHByZSBjbGFzcz0iQXlhIj4KPGNvZGU+PGEgaHJlZj0iI3Y0NDc3NjcxMjEiPjxzcGFuIGNsYXNzPSJMb2NhbFZhciI+Yjwvc3Bhbj48L2E+PC9jb2RlPgo8L3ByZT4K"},"_"),s(")")]),s(`
`)],-1),a("p",null,[s("Note that we are using the "),a("code",null,"elim"),s(" keyword, which describes the variables that the function body is pattern matching on.")],-1),a("h2",{id:"heterogeneous-equality",tabindex:"-1"},[s("Heterogeneous equality "),a("a",{class:"header-anchor",href:"#heterogeneous-equality","aria-label":'Permalink to "Heterogeneous equality"'},"​")],-1),a("p",null,"When working with indexed families, you may want to have heterogeneous equality to avoid having mysterious coercions. For example, consider the associativity of sized vector appends. We first need to define sized vectors and the append operation:",-1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"variable"),s(),a("a",{id:"v990897274",href:"#v990897274"},[a("span",{class:"Generalized"},"n")]),s(),a("a",{id:"v539690370",href:"#v539690370"},[a("span",{class:"Generalized"},"m")]),s(),a("a",{id:"v1976804832",href:"#v1976804832"},[a("span",{class:"Generalized"},"o")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")]),s(`
`),a("span",{class:"Comment"},"// Definitions"),s(`
`),a("span",{class:"Keyword"},"open"),s(),a("span",{class:"Keyword"},"inductive"),s(),a("a",{id:"Mian-Vec",class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Vec"},[a("span",{class:"Data"},"Vec")]),s(" ("),a("a",{id:"v762809053",class:"aya-hover","aya-hover-text":"Nat",href:"#v762809053"},[a("span",{class:"LocalVar"},"n")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")]),s(") ("),a("a",{id:"v1932536213",class:"aya-hover","aya-hover-text":"Type 0",href:"#v1932536213"},[a("span",{class:"LocalVar"},"A")]),s(" : "),a("span",{class:"Keyword"},"Type"),s(`)
| 0, `),a("a",{id:"v406375608",class:"aya-hover","aya-hover-text":"Type 0",href:"#v406375608"},[a("span",{class:"LocalVar"},"A")]),s(" ⇒ "),a("a",{id:"Mian-Vec-nil",class:"aya-hover","aya-hover-text":"Vec 0 A",href:"#Mian-Vec-nil"},[a("span",{class:"Constructor"},"nil")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-Nat-suc"},[a("span",{class:"Constructor"},"suc")]),s(),a("a",{id:"v157168588",class:"aya-hover","aya-hover-text":"Nat",href:"#v157168588"},[a("span",{class:"LocalVar"},"n")]),s(", "),a("a",{id:"v945834881",class:"aya-hover","aya-hover-text":"Type 0",href:"#v945834881"},[a("span",{class:"LocalVar"},"A")]),s(" ⇒ "),a("span",{class:"Keyword"},"infixr"),s(),a("a",{id:"Mian-Vec-3a3c",class:"aya-hover","aya-hover-text":"Vec (suc n) A",href:"#Mian-Vec-3a3c"},[a("span",{class:"Constructor"},":<")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v945834881"},[a("span",{class:"LocalVar"},"A")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Vec"},[a("span",{class:"Data"},"Vec")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v157168588"},[a("span",{class:"LocalVar"},"n")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v945834881"},[a("span",{class:"LocalVar"},"A")]),s(`)
`),a("span",{class:"Keyword"},"overlap"),s(),a("span",{class:"Keyword"},"def"),s(),a("span",{class:"Keyword"},"infixr"),s(),a("a",{id:"Mian-2b2b",class:"aya-hover","aya-hover-text":"Vec (n + m) A",href:"#Mian-2b2b"},[a("span",{class:"Fn"},"++")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Vec"},[a("span",{class:"Data"},"Vec")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v990897274"},[a("span",{class:"Generalized"},"n")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(") ("),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Vec"},[a("span",{class:"Data"},"Vec")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v539690370"},[a("span",{class:"Generalized"},"m")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(") : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Vec"},[a("span",{class:"Data"},"Vec")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v990897274"},[a("span",{class:"Generalized"},"n")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-2b"},[a("span",{class:"Fn"},"+")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v539690370"},[a("span",{class:"Generalized"},"m")]),s(") "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Vec 0 A",href:"#Mian-Vec-nil"},[a("span",{class:"Constructor"},"nil")]),s(", "),a("a",{id:"v1364497552",class:"aya-hover","aya-hover-text":"Vec m A",href:"#v1364497552"},[a("span",{class:"LocalVar"},"ys")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Vec m A",href:"#v1364497552"},[a("span",{class:"LocalVar"},"ys")]),s(`
| `),a("a",{id:"v916835004",class:"aya-hover","aya-hover-text":"Vec n A",href:"#v916835004"},[a("span",{class:"LocalVar"},"ys")]),s(", "),a("a",{class:"aya-hover","aya-hover-text":"Vec 0 A",href:"#Mian-Vec-nil"},[a("span",{class:"Constructor"},"nil")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Vec n A",href:"#v916835004"},[a("span",{class:"LocalVar"},"ys")]),s(`
| `),a("a",{id:"v1112737073",class:"aya-hover","aya-hover-text":"A",href:"#v1112737073"},[a("span",{class:"LocalVar"},"x")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec (suc n) A",href:"#Mian-Vec-3a3c"},[a("span",{class:"Constructor"},":<")]),s(),a("a",{id:"v1513867245",class:"aya-hover","aya-hover-text":"Vec n A",href:"#v1513867245"},[a("span",{class:"LocalVar"},"xs")]),s(", "),a("a",{id:"v404648734",class:"aya-hover","aya-hover-text":"Vec m A",href:"#v404648734"},[a("span",{class:"LocalVar"},"ys")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1112737073"},[a("span",{class:"LocalVar"},"x")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec (suc (?n A x xs ys n m)) (?A A x xs ys n m)",href:"#Mian-Vec-3a3c"},[a("span",{class:"Constructor"},":<")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec n A",href:"#v1513867245"},[a("span",{class:"LocalVar"},"xs")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec (?n A x xs ys n m + ?m A x xs ys n m) (?A A x xs ys n m)",href:"#Mian-2b2b"},[a("span",{class:"Fn"},"++")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec m A",href:"#v404648734"},[a("span",{class:"LocalVar"},"ys")]),s(`
`),a("span",{class:"Keyword"},"tighter"),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec (suc n) A",href:"#Mian-Vec-3a3c"},[a("span",{class:"Constructor"},":<")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")])]),s(`
`)],-1),v(`<p>It is tempting to use the below definition:</p><pre class="Aya"><code><span class="Keyword">overlap</span> <span class="Keyword">def</span> ++-assoc (xs : Vec n A) (ys : Vec m A) (zs : Vec o A)
  : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) <span class="Keyword">elim</span> xs
| nil ⇒ refl
| x :&lt; xs ⇒ pmap (x :&lt;) (++-assoc xs ys zs)</code>
</pre><p>However, this definition is not well-typed:</p><ul><li><p><code>(xs ++ ys) ++ zs</code> is of type <code class="Aya"><span class="Call"><a href="#Mian-Vec"><span class="Data">Vec</span></a> ((<a href="#v1807623441"><span class="LocalVar">n</span></a> <a href="#Mian-2b"><span class="Fn">+</span></a> <a href="#v1231006815"><span class="LocalVar">m</span></a>) <a href="#Mian-2b"><span class="Fn">+</span></a> <a href="#v1979787155"><span class="LocalVar">o</span></a>) <a href="#v1666544295"><span class="LocalVar">A</span></a></span></code></p></li><li><p><code>xs ++ (ys ++ zs)</code> is of type <code class="Aya"><span class="Call"><a href="#Mian-Vec"><span class="Data">Vec</span></a> (<a href="#v2044282225"><span class="LocalVar">n</span></a> <a href="#Mian-2b"><span class="Fn">+</span></a> (<a href="#v1305486145"><span class="LocalVar">m</span></a> <a href="#Mian-2b"><span class="Fn">+</span></a> <a href="#v840083671"><span class="LocalVar">o</span></a>)) <a href="#v2048537720"><span class="LocalVar">A</span></a></span></code>.</p></li></ul><p>They are not the same! Fortunately, we can prove that they are propositionally equal. We need to show that natural number addition is associative, which is the key lemma of this propositional equality:</p>`,5),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-2b-assoc",class:"aya-hover","aya-hover-text":"((a + b) + c) = (a + (b + c))",href:"#Mian-2b-assoc"},[a("span",{class:"Fn"},"+-assoc")]),s(" {"),a("a",{id:"v1181815135",class:"aya-hover","aya-hover-text":"Nat",href:"#v1181815135"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{id:"v919446210",class:"aya-hover","aya-hover-text":"Nat",href:"#v919446210"},[a("span",{class:"LocalVar"},"b")]),s(),a("a",{id:"v57241990",class:"aya-hover","aya-hover-text":"Nat",href:"#v57241990"},[a("span",{class:"LocalVar"},"c")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")]),s("} : ("),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v1181815135"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-2b"},[a("span",{class:"Fn"},"+")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v919446210"},[a("span",{class:"LocalVar"},"b")]),s(") "),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-2b"},[a("span",{class:"Fn"},"+")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v57241990"},[a("span",{class:"LocalVar"},"c")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v1181815135"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-2b"},[a("span",{class:"Fn"},"+")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v919446210"},[a("span",{class:"LocalVar"},"b")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-2b"},[a("span",{class:"Fn"},"+")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v57241990"},[a("span",{class:"LocalVar"},"c")]),s(") "),a("span",{class:"Keyword"},"elim"),s(),a("a",{href:"#v1181815135"},[a("span",{class:"LocalVar"},"a")]),s(`
| 0 ⇒ `),a("a",{class:"aya-hover","aya-hover-text":"(b + c) = (b + c)",href:"#Mian-refl"},[a("span",{class:"Fn"},"refl")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-Nat-suc"},[a("span",{class:"Constructor"},"suc")]),s(" _ ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"suc ((_ + b) + c) = suc (_ + (b + c))",href:"#Mian-pmap"},[a("span",{class:"Fn"},"pmap")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat → Nat",href:"#Mian-Nat-suc"},[a("span",{class:"Constructor"},"suc")]),s(),a("a",{class:"aya-hover","aya-hover-text":"((_ + b) + c) = (_ + (b + c))",href:"#Mian-2b-assoc"},[a("span",{class:"Fn"},"+-assoc")])]),s(`
`)],-1),v('<p>Now we can work on the proof of <code>++-assoc</code>. Here&#39;s a lame definition that is well-typed in pre-cubical type theory, and is also hard to prove -- we <code class="Aya"><a href="#Mian-cast"><span class="Fn">cast</span></a></code> one side of the equation to be other side. So instead of:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xs ++ (ys ++ zs) = (xs ++ ys) ++ zs</span></span></code></pre></div><p>We show:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>f (xs ++ (ys ++ zs)) = (xs ++ ys) ++ zs</span></span></code></pre></div><p>Where <code>f</code> is a function that changes the type of the vector, implemented using <code class="Aya"><a href="#Mian-cast"><span class="Fn">cast</span></a></code>. The definition looks like this:</p>',5),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"example"),s(),a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-3aNoExport-2b2b-assoc-ty",class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3aNoExport-2b2b-assoc-ty"},[a("span",{class:"Fn"},"++-assoc-ty")]),s(" ("),a("a",{id:"v322561962",class:"aya-hover","aya-hover-text":"Vec n A",href:"#v322561962"},[a("span",{class:"LocalVar"},"xs")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Vec"},[a("span",{class:"Data"},"Vec")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v990897274"},[a("span",{class:"Generalized"},"n")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(") ("),a("a",{id:"v532048323",class:"aya-hover","aya-hover-text":"Vec m A",href:"#v532048323"},[a("span",{class:"LocalVar"},"ys")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Vec"},[a("span",{class:"Data"},"Vec")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v539690370"},[a("span",{class:"Generalized"},"m")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(") ("),a("a",{id:"v1237740254",class:"aya-hover","aya-hover-text":"Vec o A",href:"#v1237740254"},[a("span",{class:"LocalVar"},"zs")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Vec"},[a("span",{class:"Data"},"Vec")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v1976804832"},[a("span",{class:"Generalized"},"o")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(`)
  ⇒ `),a("a",{class:"aya-hover","aya-hover-text":"Vec (n + (m + o)) A",href:"#Mian-cast"},[a("span",{class:"Fn"},"cast")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Vec ((n + m) + o) A = Vec (n + (m + o)) A",href:"#Mian-pmap"},[a("span",{class:"Fn"},"pmap")]),s(" ("),a("span",{class:"Keyword"},"fn"),s(),a("a",{id:"v305502850",href:"#v305502850"},[a("span",{class:"LocalVar"},"n")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Vec"},[a("span",{class:"Data"},"Vec")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v305502850"},[a("span",{class:"LocalVar"},"n")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(") "),a("a",{class:"aya-hover","aya-hover-text":"((n + m) + o) = (n + (m + o))",href:"#Mian-2b-assoc"},[a("span",{class:"Fn"},"+-assoc")]),s(") (("),a("a",{class:"aya-hover","aya-hover-text":"Vec n A",href:"#v322561962"},[a("span",{class:"LocalVar"},"xs")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec (?n n A m o xs ys zs + ?m n A m o xs ys zs) (?A n A m o xs ys zs)",href:"#Mian-2b2b"},[a("span",{class:"Fn"},"++")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec m A",href:"#v532048323"},[a("span",{class:"LocalVar"},"ys")]),s(") "),a("a",{class:"aya-hover","aya-hover-text":"Vec ((n + m) + o) A",href:"#Mian-2b2b"},[a("span",{class:"Fn"},"++")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec o A",href:"#v1237740254"},[a("span",{class:"LocalVar"},"zs")]),s(") "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec n A",href:"#v322561962"},[a("span",{class:"LocalVar"},"xs")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec (?n n A m o xs ys zs + ?m n A m o xs ys zs) (?A n A m o xs ys zs)",href:"#Mian-2b2b"},[a("span",{class:"Fn"},"++")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Vec m A",href:"#v532048323"},[a("span",{class:"LocalVar"},"ys")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec (?n n A m o xs ys zs + ?m n A m o xs ys zs) (?A n A m o xs ys zs)",href:"#Mian-2b2b"},[a("span",{class:"Fn"},"++")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec o A",href:"#v1237740254"},[a("span",{class:"LocalVar"},"zs")]),s(")")]),s(`
`)],-1),v('<p>It is harder to prove because in the induction step, one need to show that <code class="Aya"><span class="Call"><a href="#Mian-cast"><span class="Fn">cast</span></a> <span class="Call">(<a href="#Mian-pmap"><span class="Fn">pmap</span></a> (<span class="Keyword">fn</span> <a id="v1909398279" href="#v1909398279">p0</a> ⇒ <span class="Call"><a href="#Mian-Vec"><span class="Data">Vec</span></a> <a href="#v1909398279"><span class="LocalVar">p0</span></a> <a href="#v1230701703"><span class="LocalVar">A</span></a></span>) <a href="#Mian-2b-assoc"><span class="Fn">+-assoc</span></a>)</span></span></code> is equivalent to the identity function in order to use the induction hypothesis. For the record, here&#39;s the proof:</p>',1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-castRefl",class:"aya-hover","aya-hover-text":"cast refl a = a",href:"#Mian-castRefl"},[a("span",{class:"Fn"},"castRefl")]),s(" ("),a("a",{id:"v1533985074",class:"aya-hover","aya-hover-text":"A",href:"#v1533985074"},[a("span",{class:"LocalVar"},"a")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(") : "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#Mian-cast"},[a("span",{class:"Fn"},"cast")]),s(),a("span",{class:"Keyword"},"↑"),s(),a("a",{class:"aya-hover","aya-hover-text":"A = A",href:"#Mian-refl"},[a("span",{class:"Fn"},"refl")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1533985074"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1533985074"},[a("span",{class:"LocalVar"},"a")]),s(" ⇒ "),a("span",{class:"Keyword"},"fn"),s(),a("a",{id:"v1611370719",href:"#v1611370719"},[a("span",{class:"LocalVar"},"i")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#Mian-coe"},[a("span",{class:"Primitive"},"coe")]),s(),a("a",{class:"aya-hover","aya-hover-text":"I",href:"#v1611370719"},[a("span",{class:"LocalVar"},"i")]),s(" 1 ("),a("span",{class:"Keyword"},"fn"),s(),a("a",{id:"v651100072",href:"#v651100072"},[a("span",{class:"LocalVar"},"j")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(") "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1533985074"},[a("span",{class:"LocalVar"},"a")])]),s(`
`)],-1),a("p",null,"But still, with this lemma it is still hard. Cubical provides a pleasant way of working with heterogeneous equality:",-1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-Path27",class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Path27"},[a("span",{class:"Fn"},"Path'")]),s(" ("),a("a",{id:"v1545827753",class:"aya-hover","aya-hover-text":"I → Type 0",href:"#v1545827753"},[a("span",{class:"LocalVar"},"A")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"ISet",href:"#Mian-I"},[a("span",{class:"Primitive"},"I")]),s(" → "),a("span",{class:"Keyword"},"Type"),s(") ("),a("a",{id:"v1611832218",class:"aya-hover","aya-hover-text":"A 0",href:"#v1611832218"},[a("span",{class:"LocalVar"},"a")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v1545827753"},[a("span",{class:"LocalVar"},"A")]),s(" 0) ("),a("a",{id:"v2027317551",class:"aya-hover","aya-hover-text":"A 1",href:"#v2027317551"},[a("span",{class:"LocalVar"},"b")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v1545827753"},[a("span",{class:"LocalVar"},"A")]),s(" 1) ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Path"},[a("span",{class:"Primitive"},"Path")]),s(),a("a",{class:"aya-hover","aya-hover-text":"I → Type 0",href:"#v1545827753"},[a("span",{class:"LocalVar"},"A")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A 0",href:"#v1611832218"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A 1",href:"#v2027317551"},[a("span",{class:"LocalVar"},"b")])]),s(`
`)],-1),v("<p>So if we have <code>X : A = B</code> and <code>a : A</code>, <code>b : B</code>, then <code>Path (\\i =&gt; X i) a b</code> expresses the heterogeneous equality between <code>a</code> and <code>b</code> nicely.</p><p>We may then use the following type signature:</p>",2),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-2b2b-assoc-type",class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-2b2b-assoc-type"},[a("span",{class:"Fn"},"++-assoc-type")]),s(" ("),a("a",{id:"v1733581655",class:"aya-hover","aya-hover-text":"Vec n A",href:"#v1733581655"},[a("span",{class:"LocalVar"},"xs")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Vec"},[a("span",{class:"Data"},"Vec")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v990897274"},[a("span",{class:"Generalized"},"n")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(") ("),a("a",{id:"v1814827909",class:"aya-hover","aya-hover-text":"Vec m A",href:"#v1814827909"},[a("span",{class:"LocalVar"},"ys")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Vec"},[a("span",{class:"Data"},"Vec")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v539690370"},[a("span",{class:"Generalized"},"m")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(") ("),a("a",{id:"v1597328335",class:"aya-hover","aya-hover-text":"Vec o A",href:"#v1597328335"},[a("span",{class:"LocalVar"},"zs")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Vec"},[a("span",{class:"Data"},"Vec")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v1976804832"},[a("span",{class:"Generalized"},"o")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(`)
  ⇒ `),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Path"},[a("span",{class:"Primitive"},"Path")]),s(" ("),a("span",{class:"Keyword"},"fn"),s(),a("a",{id:"v21422054",href:"#v21422054"},[a("span",{class:"LocalVar"},"i")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Vec"},[a("span",{class:"Data"},"Vec")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-2b-assoc"},[a("span",{class:"Fn"},"+-assoc")]),s(),a("a",{class:"aya-hover","aya-hover-text":"I",href:"#v21422054"},[a("span",{class:"LocalVar"},"i")]),s(") "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(") (("),a("a",{class:"aya-hover","aya-hover-text":"Vec n A",href:"#v1733581655"},[a("span",{class:"LocalVar"},"xs")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec (?n n A m o xs ys zs + ?m n A m o xs ys zs) (?A n A m o xs ys zs)",href:"#Mian-2b2b"},[a("span",{class:"Fn"},"++")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec m A",href:"#v1814827909"},[a("span",{class:"LocalVar"},"ys")]),s(") "),a("a",{class:"aya-hover","aya-hover-text":"Vec ((n + m) + o) A",href:"#Mian-2b2b"},[a("span",{class:"Fn"},"++")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec o A",href:"#v1597328335"},[a("span",{class:"LocalVar"},"zs")]),s(") ("),a("a",{class:"aya-hover","aya-hover-text":"Vec n A",href:"#v1733581655"},[a("span",{class:"LocalVar"},"xs")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec (?n n A m o xs ys zs + ?m n A m o xs ys zs) (?A n A m o xs ys zs)",href:"#Mian-2b2b"},[a("span",{class:"Fn"},"++")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Vec m A",href:"#v1814827909"},[a("span",{class:"LocalVar"},"ys")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec (?n n A m o xs ys zs + ?m n A m o xs ys zs) (?A n A m o xs ys zs)",href:"#Mian-2b2b"},[a("span",{class:"Fn"},"++")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Vec o A",href:"#v1597328335"},[a("span",{class:"LocalVar"},"zs")]),s("))")]),s(`
`)],-1),a("p",null,"The proof is omitted (try yourself!).",-1),a("h2",{id:"quotient-inductive-types",tabindex:"-1"},[s("Quotient inductive types "),a("a",{class:"header-anchor",href:"#quotient-inductive-types","aria-label":'Permalink to "Quotient inductive types"'},"​")],-1),a("p",null,"Quotient types are types that equates their instances in a non-trivial way. In Aya, they are defined using the following syntax:",-1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"open"),s(),a("span",{class:"Keyword"},"inductive"),s(),a("a",{id:"Mian-Interval",class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Interval"},[a("span",{class:"Data"},"Interval")]),s(`
| `),a("a",{id:"Mian-Interval-left",class:"aya-hover","aya-hover-text":"Interval",href:"#Mian-Interval-left"},[a("span",{class:"Constructor"},"left")]),s(`
| `),a("a",{id:"Mian-Interval-right",class:"aya-hover","aya-hover-text":"Interval",href:"#Mian-Interval-right"},[a("span",{class:"Constructor"},"right")]),s(`
| `),a("a",{id:"Mian-Interval-line",class:"aya-hover","aya-hover-text":"left = right",href:"#Mian-Interval-line"},[a("span",{class:"Constructor"},"line")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Interval",href:"#Mian-Interval-left"},[a("span",{class:"Constructor"},"left")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Interval",href:"#Mian-Interval-right"},[a("span",{class:"Constructor"},"right")])]),s(`
`)],-1),v('<p>This is an uninteresting quotient type, that is basically <code class="Aya"><a href="#Mian-Bool"><span class="Data">Bool</span></a></code> but saying its two values are equal, so it&#39;s really just a unit type, with its unique element being the equivalence class of <code class="Aya"><a href="#Mian-Interval-left"><span class="Constructor">left</span></a></code> and <code class="Aya"><a href="#Mian-Interval-right"><span class="Constructor">right</span></a></code>.</p><p>If you&#39;re familiar with a proof assistant with an intensional equality like Coq/Agda/Lean/etc., you might find this surprising because a unit type shall not have two distinct elements, and an equality shall not be stated between two distinct constructors. How does this work in Aya?</p><p>Actually, in these systems, the equality is defined <em>inductively</em>, and it only has one constructor -- <code>refl</code>. This is not how equality is defined in Aya, so we can cook some interesting equality proofs into it, which includes these equality-looking constructors.</p><ol><li><p>The type of <code>line</code> will be translated into <code class="Aya"><span class="Primitive">I</span> → <a href="#Mian-Interval"><span class="Data">Interval</span></a></code> together with the judgmental equality that <code class="Aya"><span class="Call"><a href="#Mian-Interval-line"><span class="Constructor">line</span></a> <span class="Keyword">0</span></span></code> is <code class="Aya"><a href="#Mian-Interval-left"><span class="Constructor">left</span></a></code> and <code class="Aya"><span class="Call"><a href="#Mian-Interval-line"><span class="Constructor">line</span></a> <span class="Keyword">1</span></span></code> is <code class="Aya"><a href="#Mian-Interval-right"><span class="Constructor">right</span></a></code>, basically a desugaring of the equality with additional features. This makes <code>line</code> a valid constructor in normal type theory: it takes some parameters and returns <code class="Aya"><a href="#Mian-Interval"><span class="Data">Interval</span></a></code>.</p></li><li><p>These judgmental equalities need to be preserved by the elimination rule of <code class="Aya"><a href="#Mian-Interval"><span class="Data">Interval</span></a></code>. Here is an example elimination:</p></li></ol>',4),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"example"),s(),a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-3aNoExport-Interval-elim",class:"aya-hover","aya-hover-text":"A",href:"#Mian-3aNoExport-Interval-elim"},[a("span",{class:"Fn"},"Interval-elim")]),s(" {"),a("a",{id:"v172678484",class:"aya-hover","aya-hover-text":"A",href:"#v172678484"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{id:"v337533935",class:"aya-hover","aya-hover-text":"A",href:"#v337533935"},[a("span",{class:"LocalVar"},"b")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s("} {"),a("a",{id:"v985324122",class:"aya-hover","aya-hover-text":"a = b",href:"#v985324122"},[a("span",{class:"LocalVar"},"p")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v172678484"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v337533935"},[a("span",{class:"LocalVar"},"b")]),s("} ("),a("a",{id:"v1724256292",class:"aya-hover","aya-hover-text":"Interval",href:"#v1724256292"},[a("span",{class:"LocalVar"},"i")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Interval"},[a("span",{class:"Data"},"Interval")]),s(") : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(),a("span",{class:"Keyword"},"elim"),s(),a("a",{href:"#v1724256292"},[a("span",{class:"LocalVar"},"i")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Interval",href:"#Mian-Interval-left"},[a("span",{class:"Constructor"},"left")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v172678484"},[a("span",{class:"LocalVar"},"a")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Interval",href:"#Mian-Interval-right"},[a("span",{class:"Constructor"},"right")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v337533935"},[a("span",{class:"LocalVar"},"b")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"left = right",href:"#Mian-Interval-line"},[a("span",{class:"Constructor"},"line")]),s(),a("a",{id:"v1560702077",class:"aya-hover","aya-hover-text":"I",href:"#v1560702077"},[a("span",{class:"LocalVar"},"j")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v985324122"},[a("span",{class:"LocalVar"},"p")]),s(),a("a",{class:"aya-hover","aya-hover-text":"I",href:"#v1560702077"},[a("span",{class:"LocalVar"},"j")])]),s(`
`)],-1),v("<p>Note that the term <code>pmap Interval-elim line</code>, which reduces to <code>p</code>, has type <code>Interval-elim left = Interval-elim right</code>, so we need to check if <code>p 0</code> equals <code>Interval-elim left</code>, and <code>p 1</code> equals <code>Interval-elim right</code>. This is a <em>confluence check</em> that ensures the elimination is well-defined.</p><p>What&#39;s interesting about this type, is that its elimination implies function extensionality:</p>",2),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"private"),s(),a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-lemma",class:"aya-hover","aya-hover-text":"B",href:"#Mian-lemma"},[a("span",{class:"Fn"},"lemma")]),s(`
  (`),a("a",{id:"v1731977615",class:"aya-hover","aya-hover-text":"A → B",href:"#v1731977615"},[a("span",{class:"LocalVar"},"f")]),s(),a("a",{id:"v1703009290",class:"aya-hover","aya-hover-text":"A → B",href:"#v1703009290"},[a("span",{class:"LocalVar"},"g")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(" → "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v1776374725"},[a("span",{class:"Generalized"},"B")]),s(") ("),a("a",{id:"v1072506992",class:"aya-hover","aya-hover-text":"Fn (B : A) → f B = g B",href:"#v1072506992"},[a("span",{class:"LocalVar"},"p")]),s(" : "),a("span",{class:"Keyword"},"∀"),s(),a("a",{id:"v1424482154",class:"aya-hover","aya-hover-text":"A",href:"#v1424482154"},[a("span",{class:"LocalVar"},"x")]),s(" → "),a("a",{class:"aya-hover","aya-hover-text":"B",href:"#v1731977615"},[a("span",{class:"LocalVar"},"f")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1424482154"},[a("span",{class:"LocalVar"},"x")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"B",href:"#v1703009290"},[a("span",{class:"LocalVar"},"g")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1424482154"},[a("span",{class:"LocalVar"},"x")]),s(`)
  (`),a("a",{id:"v1997702454",class:"aya-hover","aya-hover-text":"Interval",href:"#v1997702454"},[a("span",{class:"LocalVar"},"i")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Interval"},[a("span",{class:"Data"},"Interval")]),s(") ("),a("a",{id:"v1479696465",class:"aya-hover","aya-hover-text":"A",href:"#v1479696465"},[a("span",{class:"LocalVar"},"a")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(") : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v1776374725"},[a("span",{class:"Generalized"},"B")]),s(),a("span",{class:"Keyword"},"elim"),s(),a("a",{href:"#v1997702454"},[a("span",{class:"LocalVar"},"i")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Interval",href:"#Mian-Interval-left"},[a("span",{class:"Constructor"},"left")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"B",href:"#v1731977615"},[a("span",{class:"LocalVar"},"f")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1479696465"},[a("span",{class:"LocalVar"},"a")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Interval",href:"#Mian-Interval-right"},[a("span",{class:"Constructor"},"right")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"B",href:"#v1703009290"},[a("span",{class:"LocalVar"},"g")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1479696465"},[a("span",{class:"LocalVar"},"a")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"left = right",href:"#Mian-Interval-line"},[a("span",{class:"Constructor"},"line")]),s(),a("a",{id:"v124734309",class:"aya-hover","aya-hover-text":"I",href:"#v124734309"},[a("span",{class:"LocalVar"},"j")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"B",href:"#v1072506992"},[a("span",{class:"LocalVar"},"p")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1479696465"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"I",href:"#v124734309"},[a("span",{class:"LocalVar"},"j")]),s(`

`),a("span",{class:"Keyword"},"example"),s(),a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-3aNoExport-funExt27",class:"aya-hover","aya-hover-text":"f = g",href:"#Mian-3aNoExport-funExt27"},[a("span",{class:"Fn"},"funExt'")]),s(" ("),a("a",{id:"v93054696",class:"aya-hover","aya-hover-text":"A → B",href:"#v93054696"},[a("span",{class:"LocalVar"},"f")]),s(),a("a",{id:"v1932597611",class:"aya-hover","aya-hover-text":"A → B",href:"#v1932597611"},[a("span",{class:"LocalVar"},"g")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v445918232"},[a("span",{class:"Generalized"},"A")]),s(" → "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#v1776374725"},[a("span",{class:"Generalized"},"B")]),s(") ("),a("a",{id:"v735085430",class:"aya-hover","aya-hover-text":"Fn (B : A) → f B = g B",href:"#v735085430"},[a("span",{class:"LocalVar"},"p")]),s(" : "),a("span",{class:"Keyword"},"∀"),s(),a("a",{id:"v1355887174",class:"aya-hover","aya-hover-text":"A",href:"#v1355887174"},[a("span",{class:"LocalVar"},"a")]),s(" → "),a("a",{class:"aya-hover","aya-hover-text":"B",href:"#v93054696"},[a("span",{class:"LocalVar"},"f")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1355887174"},[a("span",{class:"LocalVar"},"a")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"B",href:"#v1932597611"},[a("span",{class:"LocalVar"},"g")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A",href:"#v1355887174"},[a("span",{class:"LocalVar"},"a")]),s(") : "),a("a",{class:"aya-hover","aya-hover-text":"A → B",href:"#v93054696"},[a("span",{class:"LocalVar"},"f")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A → B",href:"#v1932597611"},[a("span",{class:"LocalVar"},"g")]),s(` ⇒
  `),a("a",{class:"aya-hover","aya-hover-text":"lemma f g p left = lemma f g p right",href:"#Mian-pmap"},[a("span",{class:"Fn"},"pmap")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Interval → A → B",href:"#Mian-lemma"},[a("span",{class:"Fn"},"lemma")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A → B",href:"#v93054696"},[a("span",{class:"LocalVar"},"f")]),s(),a("a",{class:"aya-hover","aya-hover-text":"A → B",href:"#v1932597611"},[a("span",{class:"LocalVar"},"g")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Fn (B : A) → f B = g B",href:"#v735085430"},[a("span",{class:"LocalVar"},"p")]),s(") ("),a("span",{class:"Keyword"},"fn"),s(),a("a",{id:"v461698165",href:"#v461698165"},[a("span",{class:"LocalVar"},"i")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Interval",href:"#Mian-Interval-line"},[a("span",{class:"Constructor"},"line")]),s(),a("a",{class:"aya-hover","aya-hover-text":"I",href:"#v461698165"},[a("span",{class:"LocalVar"},"i")]),s(")")]),s(`
`)],-1),a("p",null,[s("Note that even though we are using equation combinators like "),a("code",{class:"Aya"},[a("a",{href:"#Mian-pmap"},[a("span",{class:"Fn"},"pmap")])]),s(" which are implemented using path application and abstraction, it is not considered cheating because these are already theorems in MLTT anyway.")],-1),a("p",null,"We can define other interesting quotients such as a symmetric integer:",-1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"open"),s(),a("span",{class:"Keyword"},"inductive"),s(),a("a",{id:"Mian-Int",class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Int"},[a("span",{class:"Data"},"Int")]),s(`
| `),a("a",{id:"Mian-Int-pos",class:"aya-hover","aya-hover-text":"Int",href:"#Mian-Int-pos"},[a("span",{class:"Constructor"},"pos")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")]),s(" | "),a("a",{id:"Mian-Int-neg",class:"aya-hover","aya-hover-text":"Int",href:"#Mian-Int-neg"},[a("span",{class:"Constructor"},"neg")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")]),s(`
| `),a("a",{id:"Mian-Int-zro",class:"aya-hover","aya-hover-text":"pos 0 = neg 0",href:"#Mian-Int-zro"},[a("span",{class:"Constructor"},"zro")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Int",href:"#Mian-Int-pos"},[a("span",{class:"Constructor"},"pos")]),s(" 0 "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-3d"},[a("span",{class:"Fn"},"=")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Int",href:"#Mian-Int-neg"},[a("span",{class:"Constructor"},"neg")]),s(" 0")]),s(`
`)],-1),a("p",null,[s("Some operations on "),a("code",{class:"Aya"},[a("a",{href:"#Mian-Int"},[a("span",{class:"Data"},"Int")])]),s(":")],-1),a("pre",{class:"Aya"},[s(""),a("code",null,[a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-succ",class:"aya-hover","aya-hover-text":"Int",href:"#Mian-succ"},[a("span",{class:"Fn"},"succ")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Int"},[a("span",{class:"Data"},"Int")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Int"},[a("span",{class:"Data"},"Int")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Int",href:"#Mian-Int-pos"},[a("span",{class:"Constructor"},"pos")]),s(),a("a",{id:"v438314766",class:"aya-hover","aya-hover-text":"Nat",href:"#v438314766"},[a("span",{class:"LocalVar"},"n")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Int",href:"#Mian-Int-pos"},[a("span",{class:"Constructor"},"pos")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-Nat-suc"},[a("span",{class:"Constructor"},"suc")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v438314766"},[a("span",{class:"LocalVar"},"n")]),s(`)
| `),a("a",{class:"aya-hover","aya-hover-text":"Int",href:"#Mian-Int-neg"},[a("span",{class:"Constructor"},"neg")]),s(" 0 ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Int",href:"#Mian-Int-pos"},[a("span",{class:"Constructor"},"pos")]),s(` 1
| `),a("a",{class:"aya-hover","aya-hover-text":"Int",href:"#Mian-Int-neg"},[a("span",{class:"Constructor"},"neg")]),s(" ("),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-Nat-suc"},[a("span",{class:"Constructor"},"suc")]),s(),a("a",{id:"v1804126860",class:"aya-hover","aya-hover-text":"Nat",href:"#v1804126860"},[a("span",{class:"LocalVar"},"n")]),s(") ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Int",href:"#Mian-Int-neg"},[a("span",{class:"Constructor"},"neg")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v1804126860"},[a("span",{class:"LocalVar"},"n")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"pos 0 = neg 0",href:"#Mian-Int-zro"},[a("span",{class:"Constructor"},"zro")]),s(),a("a",{id:"v862916729",class:"aya-hover","aya-hover-text":"I",href:"#v862916729"},[a("span",{class:"LocalVar"},"i")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Int",href:"#Mian-Int-pos"},[a("span",{class:"Constructor"},"pos")]),s(` 1

`),a("span",{class:"Keyword"},"def"),s(),a("a",{id:"Mian-abs",class:"aya-hover","aya-hover-text":"Nat",href:"#Mian-abs"},[a("span",{class:"Fn"},"abs")]),s(),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Int"},[a("span",{class:"Data"},"Int")]),s(" : "),a("a",{class:"aya-hover","aya-hover-text":"Type 0",href:"#Mian-Nat"},[a("span",{class:"Data"},"Nat")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Int",href:"#Mian-Int-pos"},[a("span",{class:"Constructor"},"pos")]),s(),a("a",{id:"v1388563249",class:"aya-hover","aya-hover-text":"Nat",href:"#v1388563249"},[a("span",{class:"LocalVar"},"n")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v1388563249"},[a("span",{class:"LocalVar"},"n")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"Int",href:"#Mian-Int-neg"},[a("span",{class:"Constructor"},"neg")]),s(),a("a",{id:"v1266265220",class:"aya-hover","aya-hover-text":"Nat",href:"#v1266265220"},[a("span",{class:"LocalVar"},"n")]),s(" ⇒ "),a("a",{class:"aya-hover","aya-hover-text":"Nat",href:"#v1266265220"},[a("span",{class:"LocalVar"},"n")]),s(`
| `),a("a",{class:"aya-hover","aya-hover-text":"pos 0 = neg 0",href:"#Mian-Int-zro"},[a("span",{class:"Constructor"},"zro")]),s(" _ ⇒ 0")]),s(`
`)],-1),v('<p>The <code class="Aya"><a href="#Mian-succ"><span class="Fn">succ</span></a></code> operator has the first three clauses straightforward, and the last one is a proof of <code class="Aya"><span class="Call"><a href="#Mian-succ"><span class="Fn">succ</span></a> <span class="Call">(<a href="#Mian-Int-neg"><span class="Constructor">neg</span></a> <a href="#Mian-Nat-zero"><span class="Constructor">0</span></a>)</span></span></code> equals <code class="Aya"><span class="Call"><a href="#Mian-succ"><span class="Fn">succ</span></a> <span class="Call">(<a href="#Mian-Int-pos"><span class="Constructor">pos</span></a> <a href="#Mian-Nat-zero"><span class="Constructor">0</span></a>)</span></span></code>, as we should preserve the judgmental equality in the type of <code class="Aya"><a href="#Mian-Int-zro"><span class="Constructor">zro</span></a></code>. We need to do the same for <code class="Aya"><a href="#Mian-abs"><span class="Fn">abs</span></a></code>.</p>',1)]))}const _=T(w,[["render",N]]);export{C as __pageData,_ as default};
