import{_ as a,c as i,o as s,a2 as t}from"./chunks/framework.BV7BAn2o.js";const k=JSON.parse('{"title":"Impredicative Props are hard","description":"","frontmatter":{},"headers":[],"relativePath":"blog/ind-prop.md","filePath":"blog/ind-prop.md","lastUpdated":1718905368000}'),n={name:"blog/ind-prop.md"};function o(p,e,r,l,h,d){return s(),i("div",null,e[0]||(e[0]=[t(`<h1 id="impredicative-props-are-hard" tabindex="-1">Impredicative Props are hard <a class="header-anchor" href="#impredicative-props-are-hard" aria-label="Permalink to &quot;Impredicative Props are hard&quot;">​</a></h1><p>Throughout this blog post, I will use the term <code>Prop</code> to mean the type of propositions, which <em>does not</em> have to be strict, but has the property that it cannot eliminate to <code>Type</code>.</p><h2 id="motivation" tabindex="-1">Motivation <a class="header-anchor" href="#motivation" aria-label="Permalink to &quot;Motivation&quot;">​</a></h2><p>Long time ago I wrote a <a href="https://proofassistants.stackexchange.com/q/1970/32" target="_blank" rel="noreferrer">PASE question</a> regarding definitional irrelevance. An important pro of <code>Prop</code> in my opinion is that it is more convenient to be turned impredicative. Mathematicians want impredicativity for various reasons, one thing being that it is natural to have a proposition being a quantification over types, which I think is true.</p><p>Now I want to point out several reasons to <em>avoid</em> <code>Prop</code> and impredicativity based on <code>Prop</code>. Note that I&#39;m not asking you to get rid of impredicativity in general!</p><h2 id="ad-hoc-termination-rules-of-impredicative-prop" tabindex="-1">Ad-hoc termination rules of impredicative <code>Prop</code> <a class="header-anchor" href="#ad-hoc-termination-rules-of-impredicative-prop" aria-label="Permalink to &quot;Ad-hoc termination rules of impredicative \`Prop\`&quot;">​</a></h2><p>There is another <a href="https://proofassistants.stackexchange.com/q/1803/32" target="_blank" rel="noreferrer">related PASE question</a> regarding termination. You don&#39;t have to read it, I&#39;ll paraphrase the example.</p><p>Usually, for structural induction, we have the notion of &quot;comparing term size&quot;. For instance, if we have a pattern <code>suc n</code>, then recursively call the function itself with <code>n</code> on the same position is considered good, because we think <code>n &lt; suc n</code>. But consider the following example.</p><p>It makes sense to define the following type:</p><div class="language-haskell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">haskell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> BrouwerTree</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Leaf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Bool</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Branch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Nat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> BrouwerTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>and have the following structural-induction:</p><div class="language-haskell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">haskell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">left</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> BrouwerTree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Bool</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">left (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Leaf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">left (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Branch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xs) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left (xs </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Note that in the clause of <code>left (Branch xs)</code>, the recursive call <code>left (xs 0)</code> is considered smaller, in other words, we think <code>xs 0 &lt; Branch xs</code>.</p><p>This assumption is called &#39;predicative assumption&#39;. As you may tell from the name, it can only be made on things that are predicative, and we know <code>Prop</code> is usually impredicative, so we should not allow this. At this point, you might expect a proof of false using predicative assumption on <code>Prop</code>, which I&#39;ll show in this blog post.</p><p>Note that allowing such recursion pattern is very important! The famous W-type is also using this assumption.</p><p>A counterexample with <code>Prop</code> looks like this (since we need to talk about universes and dependent types, we start using Agda syntax instead of Haskell):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>data Bad : Prop where</span></span>
<span class="line"><span>  branch : ((P : Prop) → P → P) → Bad</span></span>
<span class="line"><span></span></span>
<span class="line"><span>bad : Bad</span></span>
<span class="line"><span>bad = branch (λ P p → p)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>no-bad : Bad → ⊥</span></span>
<span class="line"><span>no-bad (branch x) = no-bad (x Bad bad)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>very-bad : ⊥</span></span>
<span class="line"><span>very-bad = no-bad bad</span></span></code></pre></div><p>Notice that the <code>no-bad (branch x)</code> clause uses the recursion <code>no-bad (x Bad bad)</code>, which is only valid with the predicative assumption. So, having this predicative assumption actually proves false for <code>Prop</code>, so for <code>Prop</code>, we need to patch the termination checker to ban this rule. So, how hard is it to patch the termination checker?</p><p>Coq and Lean have a similar problem, but they are generating eliminators for inductive definitions, so they can generate the correct eliminator for <code>Prop</code>, instead of patching the termination checker. Then, Coq carefully implements a comparison function for size-decreasing arguments (this means eliminators are not the &quot;most primitive&quot; thing in Coq, but the termination checker is also part of it. I got this piece of information from Lysxia and Meven Lennon-Bertrand). In Coq, the eliminator for <code>Bad</code> is</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Bad_ind : forall P : Prop,</span></span>
<span class="line"><span>    ((forall p : Prop, p -&gt; p) -&gt; P) -&gt;</span></span>
<span class="line"><span>    Bad -&gt; P</span></span></code></pre></div><p>Note that there is no recursive arguments, so there is no recursion allowed.</p><p>Now, this sounds like just adding some <code>if</code> statements to the termination checker, but the situation is actually worse. In Agda, metavariables are pervasive, like the following code is partially accepted:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>data Bad : Prop where</span></span>
<span class="line"><span>  b : ((P : { }0) → P → P) → Bad</span></span></code></pre></div><p>Agda will not fail on this code, but then what to do in the termination checker is really unclear. If you&#39;re using a termination checker, you want to get rid of impredicativity of <code>Prop</code>! This eliminates the need of a universe-based irrelevance.</p><h2 id="alternative-ways-to-impredicativity" tabindex="-1">Alternative ways to impredicativity <a class="header-anchor" href="#alternative-ways-to-impredicativity" aria-label="Permalink to &quot;Alternative ways to impredicativity&quot;">​</a></h2><p>We may use axioms to get impredicativity. Suppose we define (since we no longer have it in the language) <code>Prop := Σ (A : Type) (isProp A)</code>, there are two different axioms that imply impredicativity of <code>Prop</code>:</p><ul><li>Propositional resizing, which is basically a restatement of impredicativity.</li><li>Classical axioms, which implies that <code>A : Prop</code> is either <code>⊤</code> or <code>⊥</code>, which further implies that <code>Prop ≅ Bool</code>, which implies resizing.</li><li>A completely separate layer in the type theory that only concerns logic and propositions. This is similar to the solution in Russell&#39;s original simple theory of types, where we replace the &quot;simple type&quot; with dependent types.</li></ul><p>If we think of the right way of doing math is to work with classical axioms, why on earth are we forging a weaker theorem as part of the language?</p>`,28)]))}const u=a(n,[["render",o]]);export{k as __pageData,u as default};
