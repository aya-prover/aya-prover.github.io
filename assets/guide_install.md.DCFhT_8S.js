import{_ as s,c as i,o as e,a2 as t}from"./chunks/framework.BV7BAn2o.js";const c=JSON.parse('{"title":"Install Aya","description":"","frontmatter":{},"headers":[],"relativePath":"guide/install.md","filePath":"guide/install.md","lastUpdated":1717718914000}'),n={name:"guide/install.md"};function l(r,a,h,p,o,d){return e(),i("div",null,a[0]||(a[0]=[t(`<h1 id="install-aya" tabindex="-1">Install Aya <a class="header-anchor" href="#install-aya" aria-label="Permalink to &quot;Install Aya&quot;">​</a></h1><p>At this stage of development, we recommend using the nightly version of Aya. Go to <a href="https://github.com/aya-prover/aya-dev/releases/tag/nightly-build" target="_blank" rel="noreferrer">GitHub Release</a>, there will be a plenty of files. It&#39;s updated per-commit in the <code>main</code> branch, but the release date displayed is very old and is an issue of GitHub itself.</p><p>Checking the section below that fits your platform. After the installation, run <code>aya --help</code> for general instructions and <code>aya -i</code> to start an interactive REPL. If you chose the jlink version, the <code>bin</code> folder contains the executable scripts.</p><h2 id="download-from-github-release" tabindex="-1">Download from GitHub Release <a class="header-anchor" href="#download-from-github-release" aria-label="Permalink to &quot;Download from GitHub Release&quot;">​</a></h2><p>Aya is available for Windows, Linux, and macOS, as listed below.</p><table tabindex="0"><thead><tr><th></th><th>x64</th><th>aarch64</th></tr></thead><tbody><tr><td>Windows</td><td><a href="https://github.com/aya-prover/aya-dev/releases/download/nightly-build/aya-prover_jlink_windows-x64.zip" target="_blank" rel="noreferrer">zip</a></td><td><a href="https://github.com/aya-prover/aya-dev/releases/download/nightly-build/aya-prover_jlink_windows-aarch64.zip" target="_blank" rel="noreferrer">zip</a></td></tr><tr><td>Linux</td><td><a href="https://github.com/aya-prover/aya-dev/releases/download/nightly-build/aya-prover_jlink_linux-x64.zip" target="_blank" rel="noreferrer">zip</a></td><td><a href="https://github.com/aya-prover/aya-dev/releases/download/nightly-build/aya-prover_jlink_linux-aarch64.zip" target="_blank" rel="noreferrer">zip</a></td></tr><tr><td>macOS</td><td><a href="https://github.com/aya-prover/aya-dev/releases/download/nightly-build/aya-prover_jlink_macos-x64.zip" target="_blank" rel="noreferrer">zip</a></td><td><a href="https://github.com/aya-prover/aya-dev/releases/download/nightly-build/aya-prover_jlink_macos-aarch64.zip" target="_blank" rel="noreferrer">zip</a></td></tr></tbody></table><p>Here&#39;s a hands-on script I wrote to (re)install Aya to <code>$AYA_PREFIX</code> (define the variable somewhere or replace with your preferred prefix, e.g. <code>/opt/aya</code>) on Linux x64:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${AYA_PREFIX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:-/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tmp}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $USER \${AYA_PREFIX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:-/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tmp}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${AYA_PREFIX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:-/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tmp}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${AYA_PREFIX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:-/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tmp}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/aya-prover/aya-dev/releases/download/nightly-build/aya-prover_jlink_linux-x64.zip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aya-prover_jlink_linux-x64.zip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aya-prover_jlink_linux-x64.zip</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span></span></code></pre></div><p>If it&#39;s the first time you install Aya, you may want to do (or replace <code>~/.bashrc</code> with your shell&#39;s rc file):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;export PATH=&quot;$AYA_PREFIX/bin:$PATH&quot;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span></code></pre></div><h2 id="use-aya-in-github-actions" tabindex="-1">Use Aya in GitHub Actions <a class="header-anchor" href="#use-aya-in-github-actions" aria-label="Permalink to &quot;Use Aya in GitHub Actions&quot;">​</a></h2><p>If you want to use Aya in your GitHub Actions workflow, you can use <a href="https://github.com/aya-prover/setup-aya" target="_blank" rel="noreferrer">aya-prover/setup-aya</a> like</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Setup Aya</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">aya-prover/setup-aya@latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nightly-build&#39;</span></span></code></pre></div><p>The step above will install the latest version of Aya to <code>PATH</code>. You can find the complete example <a href="https://github.com/aya-prover/setup-aya/blob/main/.github/workflows/test-setup-nightly.yml" target="_blank" rel="noreferrer">here</a>.</p><h2 id="if-you-already-have-java-runtime" tabindex="-1">If you already have Java runtime... <a class="header-anchor" href="#if-you-already-have-java-runtime" aria-label="Permalink to &quot;If you already have Java runtime...&quot;">​</a></h2><p>Very cool! Now you can try the prebuilt jars (much smaller and platform-independent) or build Aya from source.</p><p>We will (hopefully) always be using the latest release of Java, rather than LTS, unless there are breaking changes on the byte code format.</p><h3 id="prebuilt-binary" tabindex="-1">Prebuilt binary <a class="header-anchor" href="#prebuilt-binary" aria-label="Permalink to &quot;Prebuilt binary&quot;">​</a></h3><p>Download the jar version of <a href="https://github.com/aya-prover/aya-dev/releases/download/nightly-build/cli-fatjar.jar" target="_blank" rel="noreferrer">cli</a> (for using command line) and <a href="https://github.com/aya-prover/aya-dev/releases/download/nightly-build/lsp-fatjar.jar" target="_blank" rel="noreferrer">lsp</a> (for using VSCode) and run it with <code>java --enable-preview -jar [file name].jar</code>.</p><h3 id="build-from-source" tabindex="-1">Build from source <a class="header-anchor" href="#build-from-source" aria-label="Permalink to &quot;Build from source&quot;">​</a></h3><p>Clone the repository. Then, run build with <code>./gradlew</code> followed by a task name. If you have problems downloading dependencies (like you are in China), check out <a href="https://docs.gradle.org/current/userguide/build_environment.html#sec:accessing_the_web_via_a_proxy" target="_blank" rel="noreferrer">how to</a> let gradle use a proxy.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># build Aya and its language server as applications to \`ide-lsp/build/image/current\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># the image is usable in Java-free environments </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jlinkAya</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rerun-tasks</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># build Aya and its language server as executable</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># jars to &lt;project&gt;/build/libs/&lt;project&gt;-&lt;version&gt;-fat.jar</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fatJar</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># build a platform-dependent installer for Aya and its language</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># server with the jlink artifacts to ide-lsp/build/jpackage</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># requires https://wixtoolset.org/releases on Windows</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jpackage</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># run tests and generate coverage report to build/reports</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testCodeCoverageReport</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (Windows only) show the coverage report in your default browser</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> showCCR</span></span></code></pre></div><p>Gradle supports short-handed task names, so you can run <code>./gradlew fJ</code> to invoke <code>fatJar</code>, <code>tCCR</code> to invoke <code>testCodeCoverageReport</code>, and so on.</p>`,23)]))}const y=s(n,[["render",l]]);export{c as __pageData,y as default};
