import{_ as o,c as t,o as a,a2 as r}from"./chunks/framework.BV7BAn2o.js";const p=JSON.parse('{"title":"So you are using VSCode","description":"","frontmatter":{},"headers":[],"relativePath":"guide/vscode-tutorial.md","filePath":"guide/vscode-tutorial.md","lastUpdated":1689586300000}'),s={name:"guide/vscode-tutorial.md"};function i(n,e,d,c,l,h){return a(),t("div",null,e[0]||(e[0]=[r('<h1 id="so-you-are-using-vscode" tabindex="-1">So you are using VSCode <a class="header-anchor" href="#so-you-are-using-vscode" aria-label="Permalink to &quot;So you are using VSCode&quot;">â€‹</a></h1><p>Go to <a href="https://github.com/aya-prover/aya-vscode/releases/tag/nightly-build" target="_blank" rel="noreferrer">GitHub Releases</a>, click the latest successful run, scroll down to the bottom of the page, download the &quot;aya-prover-vscode-extension&quot;, and unzip it. Then, follow <a href="https://code.visualstudio.com/docs/editor/extension-marketplace#_install-from-a-vsix" target="_blank" rel="noreferrer">VSCode docs</a> to install the extension.</p><p>It remains to configure the Aya language server. There are two ways to use the server. First, open settings, search for &quot;Aya path&quot;, you should see a text box. Then, you have a choice:</p><ol><li>Use a jar file. Put your <code>lsp-fatjar.jar</code> file path there. Make sure you have a <code>java</code> executable in the Path (recommended) or in <code>java.home</code> key in the settings json.</li><li>Use the jlink version of Aya. Put the <code>aya-lsp</code> (or <code>aya-lsp.bat</code> if you are on Windows) file path there, which is under the <code>bin</code> folder of the jlink distribution. In this case, you <strong>don&#39;t</strong> need to have a <code>java</code> executable in the Path.</li></ol><p>Then, open a directory that is an Aya project (see <a href="./project-tutorial.html">project-tutorial</a>). Open any <code>.aya</code> file, you should see some basic highlight (keywords, comments, etc.). Wait for VSCode to activate the extension, and hit <code>Ctrl+L Ctrl+L</code> to load the file. At this point, you should see advanced highlight (type names, constructors, etc.), with clickable definitions.</p><p>The rest of the features should be quite discoverable for regular programmers, such as hovering a red or a yellow wavy line to see the error message, etc. Please create issues and discuss ideas on how to improve the error reports.</p>',6)]))}const f=o(s,[["render",i]]);export{p as __pageData,f as default};
