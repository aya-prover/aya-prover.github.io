import{_ as a,c as t,o as r,a2 as i}from"./chunks/framework.BV7BAn2o.js";const f=JSON.parse('{"title":"The Aya Prover","description":"","frontmatter":{},"headers":[],"relativePath":"guide/index.md","filePath":"guide/index.md","lastUpdated":1717718914000}'),l={name:"guide/index.md"};function n(o,e,s,h,d,p){return r(),t("div",null,e[0]||(e[0]=[i('<h1 id="the-aya-prover" tabindex="-1">The Aya Prover <a class="header-anchor" href="#the-aya-prover" aria-label="Permalink to &quot;The Aya Prover&quot;">â€‹</a></h1><ul><li><a href="./install.html">Installation Guide</a></li><li><a href="./haskeller-tutorial.html">Tutorial for functional programmers</a> (such as ML, Haskell, or Idris users)</li><li><a href="./prover-tutorial.html">Tutorial for dependent types or theorem prover users</a></li><li><a href="./vscode-tutorial.html">Tutorial for VSCode extension</a></li><li><a href="./fake-literate.html">Tutorial for the fake literate mode</a></li></ul><p>Aya is a programming language <em>and</em> an interactive proof assistant designed for type-directed programming <em>and</em> formalizing math.</p><p>The type system of Aya has the following highlights:</p><ul><li>Set-level cubical features so <code>funExt</code> and quotients are available without axioms (like <a href="https://wiki.portal.chalmers.se/agda/pmwiki.php" target="_blank" rel="noreferrer">Agda</a>, <a href="https://redprl.org" target="_blank" rel="noreferrer">redtt</a>, and <a href="https://arend-lang.github.io" target="_blank" rel="noreferrer">Arend</a> but not higher-dimensional),</li><li>Overlapping and order-independent pattern matching makes simple functions compute better,</li><li>Practical functional programming features similar to <a href="https://www.haskell.org" target="_blank" rel="noreferrer">Haskell</a> and <a href="https://www.idris-lang.org" target="_blank" rel="noreferrer">Idris</a>: dependent pattern matching, typed holes, enchanted synthesis of implicit arguments.</li></ul><p>The implementation of the Aya compiler has the following highlights:</p><ul><li>Efficient type checking by JIT-compiling well-typed definitions to JVM higher-order abstract syntax, so substitution does not traverse terms,</li><li>Convenient interactive tools such as a language server for VSCode, a REPL, and hyperlinked document generation (<a href="./../blog/tt-in-tt-qiit.html">demo</a>),</li><li>Pre-compiled binary release.</li></ul>',7)]))}const g=a(l,[["render",n]]);export{f as __pageData,g as default};
